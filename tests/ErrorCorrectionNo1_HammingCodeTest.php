<?php

namespace tests;

use maxlzp\codewars\ErrorCorrectionNo1_HammingCode;
use PHPUnit\Framework\TestCase;

class ErrorCorrectionNo1_HammingCodeTest extends TestCase
{
    public function testEncodeFunction() {
        $this->assertEquals("000111111000111000000000000111111000000111000111000111111111111000000111", encode("hey"));
        $this->assertEqualsencode("The Sensei told me that i can do this kata"));
        $this->assertEquals("000111000111000111000000000000111111000000111111000111111111000000111111000111111111000111000000", encode("T3st"));
        $this->assertEquals("000111000111000111000000000000111111111111111111000111111111000000111111000111111111000111000000000000111000000000000111000000111000000111000111", encode("T?st!%"));
    }
    public function testDecodeFunction() {
        $this->assertEquals("hey", decode("100111111000111001000010000111111000000111001111000111110110111000010111"));
        $this->assertEquals("The Sensei told me that i can do this kata", decode("000111000111000111000100000111111000111000001000000111111000000111000111000100111000000000000000000111000111000000111111000111111000000111000111000111111000111111111000000111111111000000111111000110111000010111000111000111111000111001000111000000111000000000000000000111111111000111000000000111111000111111111111000111111000111111000000000111111000000111000001000000111000000000001000000111111000111111000111000111111000000111000111000000111000000000000000000111111111000111000000000111111000111000000000000111111000000010000111000111111111000111000000000100111000000000000000000111111000111000000111000000111000000000000000000111111000000000111111000111111000000000000111000111111000111111111000000000111000000000000010000111111000000111000000000111111000111111110111000000111000000000000000000111111111000111000000000111111000111000000000000111111000111000000111000111111111000000111111000000111000000000000000000111111000111000111111000111111000000000000111000111111111000111000000000111111000000000000111"));
        $this->assertEquals("T3st", decode("000111000111000111000001000000111111000000111111000111111111000000111011000111111111000111000000"));
        $this->assertEquals("T?st!%", decode("000111000111000111000010000000111111111111011111000111111111000000111111000111101111000111000000000000111000000000000111000000111000000111000111"));
    }
}
